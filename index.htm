<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>HodLor</title>

    <link rel="stylesheet" type="text/css" href="main.css">

    <script src="./node_modules/web3/dist/web3.min.js"></script>

</head>
<body>
    <h1>HodLor Game</h1>
	<h3 id="nbOfGames"></h3>
	
	<h3 id="playerAddress"></h3>
	<h3 id="playerBalance"></h3>
	<h3 id="playerWithdraw"></h3>
	<input id="buttonWithdraw" value="Withdraw" type="button">
	<h3 id="playerPoints"></h3>

    <label for="betsize">Bet Size</label>
    <input id="betsize" type="text">
    <input id="buttonCreate" value="Create Game" type="button">





	<table id="listGames">
		<tr>
			<th>Players</th>
			<th>Bet Size</th>
			<th>Dividends per player</th>
			<th>Game Status</th>
			<th>Actions</th>
		</tr>	
	</table>
	</table>
   <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
   <script src="contract.js"></script>
    <script>
   



		var nbOfGamesJS=Hodlor.totalNumberOfGames();
		console.log(nbOfGamesJS);

		var tbl=document.getElementById("listGames");
		
		function updateGame(i){return function(){
			gameState=Hodlor.checkState(i);
			var isPlayer1=(web3.eth.defaultAccount==gameState[0][0]);
			var isPlayer2=(web3.eth.defaultAccount==gameState[0][1]);
			var isPlaying=isPlayer1||isPlayer2;
			var tr=document.createElement("tr");	
			tr.id="TRgame"+i;
				 
			if(isPlaying&&gameState[2]==0){tr.class="isPartCancelled"}
			if(isPlaying&&gameState[2]==1){tr.class="isPartWaiting"}
			if(isPlaying&&gameState[2]==2){tr.class="isPartPlaying"}
			if(isPlaying&&gameState[2]==3){tr.class="isPartFinished"}
			if(!isPlaying&&gameState[2]==0){tr.class="isNotPartCancelled"}
			if(!isPlaying&&gameState[2]==1){tr.class="isNotPartWaiting"}
			if(!isPlaying&&gameState[2]==2){tr.class="isNotPartPlaying"}
			if(!isPlaying&&gameState[2]==3){tr.class="isNotPartFinished"}
		 
			//Player 1
		 
			var td = document.createElement("td");
			td.id="TDplayer1Game"+i;
			td.innerHTML=gameState[0][0]+"<br>"+gameState[0][1];
			tr.appendChild(td);
		 
			//Player 2	
			//var td = document.createElement("td");
			//td.id="TDplayer2Game"+i;
			//var txt = document.createTextNode(gameState[0][1]);
			//td.appendChild(txt);
			//tr.appendChild(td);
			
			//BetSize
			var td = document.createElement("td");
			td.id="TDbetSizeGame"+i;
			var txt = document.createTextNode(gameState[1]/10**18);
			td.appendChild(txt);
			tr.appendChild(td);

			//Dividens per player
			var td = document.createElement("td");
			td.id="TDdivsPerPlayerGame"+i;
			var txt = document.createTextNode((Hodlor.poolPayout()-gameState[3])*gameState[1]/10**36);
			if(gameState[2]==2){td.appendChild(txt);}
			tr.appendChild(td);
						
			//GameState
			var td = document.createElement("td");
			td.id="TDgameStateGame"+i;
			if(gameState[2]==0){td.innerHTML="Game Cancelled";}
			if(gameState[2]==1){td.innerHTML="Waiting for second player";}
			if(gameState[2]==2){td.innerHTML="Game in progress";}
			if(gameState[2]==3){td.innerHTML="Game Finished";}
			tr.appendChild(td);

			//Buttons	
			var td = document.createElement("td");
			td.id="TDactionsGame"+i;
				var btn = document.createElement('input');
				btn.id="BtncancelGame"+i;
				btn.type = "button";
				btn.value = "Cancel Game";
				btn.dataset.id=i;
				btn.onclick=function(){Hodlor.cancelGame(this.dataset.id )}
				btn.style.display="none";
				if(gameState[2]==1&&web3.eth.defaultAccount==gameState[0][0]){btn.style.display="block";}
				td.appendChild(btn);
				
				var btn = document.createElement('input');
				btn.id="BtnjoinGame"+i;
				btn.type = "button";
				btn.value = "Join Game";
				btn.dataset.betSize=gameState[1];
				btn.dataset.id=i;
				btn.onclick=function(){Hodlor.joinGame(this.dataset.id,{value: this.dataset.betSize,gas: 210000} )}
				btn.style.display = "none";
				if(gameState[2]==1&&web3.eth.defaultAccount!=gameState[0][0]){btn.style.display = "block";}
				td.appendChild(btn);

				var btn = document.createElement('input');
				btn.id="BtnleaveGame"+i;
				btn.type = "button";
				btn.dataset.id=i;
				btn.style.display = "none";
				if((gameState[5][1]&&gameState[0][0]==web3.eth.defaultAccount)||(gameState[5][0]&&gameState[0][1]==web3.eth.defaultAccount)){
					btn.value = "Accept Draw";
					btn.onclick=function(){Hodlor.acceptDraw(this.dataset.id,{gas: 210000})}
				} else {
					btn.value = "Leave Game";
					btn.onclick=function(){Hodlor.leaveGame(this.dataset.id,{gas: 210000})}
				}
				if(gameState[2]==2&&(web3.eth.defaultAccount==gameState[0][0]||web3.eth.defaultAccount==gameState[0][1])){btn.style.display = "block";}
				td.appendChild(btn);

				var btn = document.createElement('input');
				btn.id="BtnaskDraw"+i;
				btn.type = "button";
				btn.dataset.id=i;
				btn.style.display = "none";
				btn.value = "Ask for Draw";
				btn.onclick=function(){Hodlor.askForDraw(this.dataset.id,{gas: 210000})}
				if(gameState[2]==2&&(web3.eth.defaultAccount==gameState[0][0]||web3.eth.defaultAccount==gameState[0][1])){btn.style.display = "block";}
				if((gameState[5][0]&&gameState[0][0]==web3.eth.defaultAccount)||(gameState[5][1]&&gameState[0][1]==web3.eth.defaultAccount)){
					btn.disabled=true;
					btn.value = "Draw asked";
				}
				if((gameState[5][1]&&gameState[0][0]==web3.eth.defaultAccount)||(gameState[5][0]&&gameState[0][1]==web3.eth.defaultAccount)){btn.style.display = "block";}
				
				
				td.appendChild(btn);

			tr.appendChild(td);
			return tr;
		}
		}
		
		function addNewGame(i){ return function() {
			var element =  document.getElementById("TRgame"+i);
			if (typeof(element) == 'undefined' || element == null) {
  				var tr = updateGame(i)();
				tbl.appendChild(tr);
			}
		}}
		
		for (var i = 0; i < nbOfGamesJS; i++) {addNewGame(i)();}
	
		var gameCreatedEvent=Hodlor.GameCreated();
		var gameUpdatedEvent=Hodlor.GameUpdated();
		gameCreatedEvent.watch(function(error, result){if (!error) {generalInformation();addNewGame(result.args.gameId)();} else { console.log(error); }});
		gameUpdatedEvent.watch(function(error, result){if (!error) {generalInformation();$("tr#TRgame"+result.args.gameId).replaceWith(updateGame(result.args.gameId)());} else { console.log(error); }});

		

		document.getElementById("buttonCreate").onclick=function() { Hodlor.createGame("0x0",{value: web3.toWei(document.getElementById("betsize").value, 'ether'),gas: 400000} ); };
		document.getElementById("buttonWithdraw").onclick=function() { Hodlor.withdraw({gas: 400000} ); };

		function generalInformation(){
			document.getElementById("nbOfGames").innerHTML="Total number of games played: "+Hodlor.totalNumberOfGames();
			document.getElementById("playerAddress").innerHTML="Your ETH address: "+web3.eth.defaultAccount;
			document.getElementById("playerBalance").innerHTML="Your ETH balance: "+web3.eth.getBalance(web3.eth.defaultAccount)/10**18;
			document.getElementById("playerWithdraw").innerHTML="ETH available for withdrawal: "+Hodlor.totalWinnings(web3.eth.defaultAccount)/10**18;
			document.getElementById("playerPoints").innerHTML="Total points: "+Hodlor.points(web3.eth.defaultAccount)/10**18;
		}
		generalInformation();


				//gameCreatedEvent.watch(function(error, result){if (!error) { document.getElementById("testEvent").innerHTML="Testing This";} else { console.log(error); }});
    </script>

</body>
</html>

